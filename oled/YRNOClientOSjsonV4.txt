/**/
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <SPI.h>
#include <U8g2lib.h>
#include <ArduinoJson.h>    //https://github.com/bblanchon/ArduinoJson

#define width8 16
#define height8 16
#define width16 16
#define height16 16
static unsigned char kropla16_bits[] = { 0x80, 0x00, 0x80, 0x00, 0xc0, 0x01, 0xc0, 0x01, 0xe0, 0x03, 0xe0, 0x03, 0xf0, 0x07, 0xf0, 0x07, 0xf8, 0x0f, 0xf8, 0x0f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xc0, 0x01 };

U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ 16, /* clock=*/ 5, /* data=*/ 4);

char buftt[16];

String linia1  = "";
String linia2  = "";
String linia3  = "";
String linia4  = "";

String symbol1  = "";
String symbol2  = "";
String symbol3  = "";
String symbol4  = "";
 int unsigned deszcz1=0;
 int unsigned deszcz2=0;
 int unsigned deszcz3=0;
 int unsigned deszcz4=0;
 
//char *text = "V1=";
String txt="";

String tt="";
byte bajt = 0;
StaticJsonDocument<250> doc;
ESP8266WiFiMulti WiFiMulti;

void setup() {
  u8g2.begin();
  u8g2.setFontMode(0); // mode transparent
  Serial.begin(115200);
  // Serial.setDebugOutput(true);

  for (uint8_t t = 3; t > 0; t--) {
    //Serial.printf("[SETUP] WAIT %d...\n", t);
    txt = "WiFi #";    txt.concat(t);    printOLED(txt);
    Serial.flush();
    delay(1000);
  }
  
  WiFi.mode(WIFI_STA);

          
          WiFiMulti.addAP("", "");
          
          Serial.print("Wait for WiFi... ");

          int traj=0;
          txt="Try %";
            while (WiFiMulti.run() != WL_CONNECTED){
              Serial.print("#");
              txt.concat("%");    printOLED(txt);
              delay(500);
              traj++;
              if (traj % 10==9){
                WiFiMulti.addAP("", "");
                if (traj % 20==19){ESP.restart();}
              }
            }
            Serial.println("");
            Serial.println("WiFi connected");
            Serial.println("IP address: ");
            Serial.println(WiFi.localIP());
            delay(500);
}

void printOLED(String txt) {
  Serial.println(txt);
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_profont22_mf);
    txt.toCharArray(buftt, 16);
    u8g2.drawStr(0,32,buftt);
  } while (u8g2.nextPage());   
}

String dajZnak(String t){
  return ((t.toInt()<1) ? "" : "+");
}

void parseJsonSingle(int nr){
  //Serial.println("parseJsonSingle---");
    if (nr==1){ 
        
        String t = doc["t1"]; if(t=="null") {t="?";}
        String d = doc["d1"]; if(d=="null") {d="0";}
        String s = doc["s1"]; if(s=="null") {s="A";}
        linia1=dajZnak(t)+t;
        symbol1 = s;
        deszcz1=d.toInt();
    }
    if (nr==2){ 
        String t = doc["t2"]; if(t=="null") {t="?";}
        String d = doc["d2"]; if(d=="null") {d="0";}
        String s = doc["s2"]; if(s=="null") {s="A";}
        linia2=dajZnak(t)+t;
        symbol2 = s;
        deszcz2=d.toInt();
    }
    if (nr==3){ 
        String t = doc["t3"]; if(t=="null") {t="?";}
        String d = doc["d3"]; if(d=="null") {d="0";}
        String s = doc["s3"]; if(s=="null") {s="A";}
        linia3=dajZnak(t)+t;
        symbol3 = s;
        deszcz3=d.toInt();
    }
    if (nr==4){ 
        String t = doc["t4"]; if(t=="null") {t="?";}
        String d = doc["d4"]; if(d=="null") {d="0";}
        String s = doc["s4"]; if(s=="null") {s="A";}
        linia4=dajZnak(t)+t;
        symbol4 = s;
        deszcz4=d.toInt();
    }
}

void YRNOparseJson(){
    parseJsonSingle(1);
    parseJsonSingle(2);
    parseJsonSingle(3);
    parseJsonSingle(4); 
}


void olejOLED(){
        byte moda = bajt % 4;
        bajt++;
        //Serial.print(bajt); Serial.print(" %= ");  Serial.println(moda);
            
        String symbolIcon = "";    
        String linijka    = "";   
        int unsigned txtLong       = 0; 
        int unsigned deszcz       = 0; 
        u8g2.firstPage();
        do {
            if (moda==0) {
               linijka="-       ";
               symbolIcon = symbol1;
               txt = linia1;
               deszcz=deszcz1;
            }           
            if (moda==1) {
               linijka="--      ";
               symbolIcon = symbol2;
               txt = linia2;
               deszcz=deszcz2;
            }
            if (moda==2) {
               linijka="----    ";
               symbolIcon = symbol3;
               txt = linia3;
               deszcz=deszcz3;
            }
            if (moda==3) {
               linijka="--------";
               symbolIcon = symbol4;
               txt = linia4;
               deszcz=deszcz4;
            }
            
            txtLong = txt.length();
            //Serial.print("txtLong=");Serial.println(txtLong);
            u8g2.setFontMode(0);
            /*WybÃ³r fontu zaleznie od dlugosci
             10,11,12,15,17,22,29 //_mr=krotki  _mf=pelny _tr=skrocony _mn=numery */
            if      (txtLong>9) {u8g2.setFont(u8g2_font_profont17_mr);} 
            else if (txtLong>6) {u8g2.setFont(u8g2_font_profont22_mr);} 
            else {               u8g2.setFont(u8g2_font_profont29_mr);}

            // print linijka
            linijka.toCharArray(buftt, 16);
            u8g2.drawStr(0,10 ,buftt);

            // print buff with data
            txt.toCharArray(buftt, 16);
            u8g2.drawUTF8(0, 32, buftt);
            
            // print symbol
            u8g2.setFont(u8g2_font_open_iconic_weather_4x_t); // 4x=32px  2x=16px
            symbolIcon.toCharArray(buftt, 16);
            u8g2.drawUTF8(78, 32, buftt); 

            // test drawBox
            //u8g2.drawBox(82,0,8,32);
            delay(50);
            Serial.print(" deszcz=");Serial.println(deszcz);
 
           if (deszcz==1) {u8g2.drawXBM(114, 2, width16, height16, kropla16_bits);}
           if (deszcz==2) {u8g2.drawXBM(114, 6, width16, height16, kropla16_bits);}
           if (deszcz==3) {u8g2.drawXBM(114,10, width16, height16, kropla16_bits);}
           if (deszcz>3)  {u8g2.drawXBM(114, 16, width16, height16, kropla16_bits);}
            
        } while ( u8g2.nextPage() );
}


void server() {
    printOLED("Update");
    Serial.print("WiFiMulti.run()=");Serial.println(WiFiMulti.run());  //0=not conect
    if ((WiFiMulti.run() == WL_CONNECTED)) {
      WiFiClient client;
      HTTPClient http;
      Serial.println("[HTTP] begin...\n");
      printOLED("[HTTP]...");
      if (http.begin(client, "http://zszczech.zut.edu.pl/e/oled.json.php")) { 
        Serial.print("[HTTP] GET...\n");
        printOLED("[HTTP]...");
        int httpCode = http.GET();
        Serial.printf("[HTTP] GET... code: %d\n", httpCode);
        if (httpCode > 0) {
            Serial.printf("[HTTP] GET... code: %d\n", httpCode);
            printOLED(itoa(httpCode, buftt, 10));
            if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
                String payload = http.getString();
                Serial.println(payload);
                DeserializationError error = deserializeJson(doc, payload);
                if (error) {
                  Serial.println(error.c_str());
                } else {
                   //parseJson();
                   YRNOparseJson();
                   olejOLED();
                }
            }
        } else {printOLED("Error"); Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str()); }
        http.end();
      } else {printOLED("Unable to connect"); Serial.printf("[HTTP} Unable to connect\n");}
      
    } // if connected 
}


long intervalOled = 3*777; // ~3 sek
long previousOledMillis = 0;    

long intervalServer = 900*1000; // 15 minut
long previousServerMillis = 0;    

void loop() {
  unsigned long currentMillis = millis();

  // OLED timing system
  if(currentMillis - previousOledMillis > intervalOled  && previousServerMillis > 0) {
      previousOledMillis = currentMillis;   
      //Serial.print(currentMillis);Serial.println(" intervalOled===");
      olejOLED();
  }

   // Server timing system
  if(currentMillis - previousServerMillis > intervalServer || previousServerMillis == 0) {
      previousServerMillis = currentMillis;   
      //Serial.print(currentMillis); Serial.println(" intervalServer===");
      printOLED("Server=900");
      server();
  }

    // LOOP version
    //server();
    //delay(60000*15);
}
